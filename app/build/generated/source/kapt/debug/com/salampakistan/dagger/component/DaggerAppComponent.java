// Generated by Dagger (https://dagger.dev).
package com.salampakistan.dagger.component;

import android.app.Application;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModel;
import com.google.gson.Gson;
import com.salampakistan.MainActivity;
import com.salampakistan.MainActivity_MembersInjector;
import com.salampakistan.base.App;
import com.salampakistan.base.App_MembersInjector;
import com.salampakistan.base.BaseFragment_MembersInjector;
import com.salampakistan.dagger.ViewModelFactory;
import com.salampakistan.dagger.ViewModelFactory_Factory;
import com.salampakistan.dagger.module.AppModule;
import com.salampakistan.dagger.module.AppModule_ProvideFMAWebServiceFactory;
import com.salampakistan.dagger.module.AppModule_ProvideOkHttpClientFactory;
import com.salampakistan.dagger.module.AppModule_ProvideOpenWeatherServiceFactory;
import com.salampakistan.dagger.module.AppModule_ProvidePreferencesFactory;
import com.salampakistan.dagger.module.AppModule_ProvideWebServiceFactory;
import com.salampakistan.dagger.module.CoreDataModule;
import com.salampakistan.dagger.module.CoreDataModule_ProvideGsonConverterFactoryFactory;
import com.salampakistan.dagger.module.CoreDataModule_ProvideGsonFactory;
import com.salampakistan.dagger.module.CoreDataModule_ProvideLoggingInterceptorFactory;
import com.salampakistan.dagger.module.CoreDataModule_ProvideOkHttpClientFactory;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeAboutUsFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeBookingFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeBusBookingSearchFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeBusListFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeCheckVisaStatusFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeContactUsFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeEventDetailsFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeEventListFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeExpertTipsSectionFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeFlightBookingFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeFlightListFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeForgotPasswordFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeHomeFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeHotelBookingDetailsFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeHotelBookingFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeHotelDetailsFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeHotelListFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeImageCarouselFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeItineraryListFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeLiveCurrencyWidgetFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeLiveWeatherWidgetFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeLocationDetailsFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeLoginFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeMapFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributePOIFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributePlanningFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeProfileFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeProfileOptionsFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeRegisterFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeReviewsListFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeSeasonDetailsFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeSeasonsSectionFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeTrainBookingFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeTripDetailsFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeTripsUCannotMissSectionFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeUpdateFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeUpdateProfileFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeWhatToDoCategoryListFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeWhatToDoListFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeWhatToDoSectionFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeWhereToGoCategoryListFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeWhereToGoListFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeWhereToGoSectionFragment;
import com.salampakistan.dagger.module.FragmentBuildersModule_ContributeWishlistListFragment;
import com.salampakistan.dagger.module.MainActivityModule_ContributeMainActivity;
import com.salampakistan.network.WebService;
import com.salampakistan.network.fma.FMAWebService;
import com.salampakistan.network.openweather.OpenWeatherService;
import com.salampakistan.network.repos.BookingRepo;
import com.salampakistan.network.repos.BookingRepo_Factory;
import com.salampakistan.network.repos.EventRepo;
import com.salampakistan.network.repos.EventRepo_Factory;
import com.salampakistan.network.repos.OthersRepo;
import com.salampakistan.network.repos.OthersRepo_Factory;
import com.salampakistan.network.repos.TripsRepo;
import com.salampakistan.network.repos.TripsRepo_Factory;
import com.salampakistan.network.repos.UsersRepo;
import com.salampakistan.network.repos.UsersRepo_Factory;
import com.salampakistan.network.repos.fma.FMARepo;
import com.salampakistan.network.repos.fma.FMARepo_Factory;
import com.salampakistan.network.repos.openweather.OpenWeatherRepo;
import com.salampakistan.network.repos.openweather.OpenWeatherRepo_Factory;
import com.salampakistan.network.repos.openweather.SeasonRepo;
import com.salampakistan.network.repos.openweather.SeasonRepo_Factory;
import com.salampakistan.ui.fragments.ImageCarouselFragment;
import com.salampakistan.ui.fragments.booking.BookingFragment;
import com.salampakistan.ui.fragments.booking.bus.BusBookingSearchFragment;
import com.salampakistan.ui.fragments.booking.bus.BusBookingSearchViewModel;
import com.salampakistan.ui.fragments.booking.bus.BusBookingSearchViewModel_Factory;
import com.salampakistan.ui.fragments.booking.bus.buslist.BusListFragment;
import com.salampakistan.ui.fragments.booking.bus.buslist.BusListViewModel;
import com.salampakistan.ui.fragments.booking.bus.buslist.BusListViewModel_Factory;
import com.salampakistan.ui.fragments.booking.flight.FlightBookingFragment;
import com.salampakistan.ui.fragments.booking.flight.FlightBookingViewModel;
import com.salampakistan.ui.fragments.booking.flight.FlightBookingViewModel_Factory;
import com.salampakistan.ui.fragments.booking.flight.flightlist.FlightListFragment;
import com.salampakistan.ui.fragments.booking.flight.flightlist.FlightListViewModel;
import com.salampakistan.ui.fragments.booking.flight.flightlist.FlightListViewModel_Factory;
import com.salampakistan.ui.fragments.booking.hotel.bookingdetails.HotelBookingDetailsFragment;
import com.salampakistan.ui.fragments.booking.hotel.bookingdetails.HotelBookingDetailsViewModel;
import com.salampakistan.ui.fragments.booking.hotel.bookingdetails.HotelBookingDetailsViewModel_Factory;
import com.salampakistan.ui.fragments.booking.hotel.hoteldetails.HotelDetailsFragment;
import com.salampakistan.ui.fragments.booking.hotel.hoteldetails.HotelDetailsViewModel;
import com.salampakistan.ui.fragments.booking.hotel.hoteldetails.HotelDetailsViewModel_Factory;
import com.salampakistan.ui.fragments.booking.hotel.hotellist.HotelListFragment;
import com.salampakistan.ui.fragments.booking.hotel.hotellist.HotelListViewModel;
import com.salampakistan.ui.fragments.booking.hotel.hotellist.HotelListViewModel_Factory;
import com.salampakistan.ui.fragments.booking.hotel.hotelsearch.HotelBookingFragment;
import com.salampakistan.ui.fragments.booking.hotel.hotelsearch.HotelBookingViewModel;
import com.salampakistan.ui.fragments.booking.hotel.hotelsearch.HotelBookingViewModel_Factory;
import com.salampakistan.ui.fragments.booking.train.TrainBookingFragment;
import com.salampakistan.ui.fragments.booking.train.TrainBookingViewModel;
import com.salampakistan.ui.fragments.booking.train.TrainBookingViewModel_Factory;
import com.salampakistan.ui.fragments.currency.CurrencyFragment;
import com.salampakistan.ui.fragments.currency.CurrencyViewModel;
import com.salampakistan.ui.fragments.currency.CurrencyViewModel_Factory;
import com.salampakistan.ui.fragments.event.EventListFragment;
import com.salampakistan.ui.fragments.event.EventListViewModel;
import com.salampakistan.ui.fragments.event.EventListViewModel_Factory;
import com.salampakistan.ui.fragments.event.detail.EventDetailsFragment;
import com.salampakistan.ui.fragments.event.detail.EventDetailsViewModel;
import com.salampakistan.ui.fragments.event.detail.EventDetailsViewModel_Factory;
import com.salampakistan.ui.fragments.forgotpassword.ForgotPasswordFragment;
import com.salampakistan.ui.fragments.forgotpassword.ForgotPasswordViewModel;
import com.salampakistan.ui.fragments.forgotpassword.ForgotPasswordViewModel_Factory;
import com.salampakistan.ui.fragments.home.ExpertTipsSectionFragment;
import com.salampakistan.ui.fragments.home.HomeFragment;
import com.salampakistan.ui.fragments.home.HomeViewModel;
import com.salampakistan.ui.fragments.home.HomeViewModel_Factory;
import com.salampakistan.ui.fragments.home.TripsCannotMissSectionFragment;
import com.salampakistan.ui.fragments.home.WhereToGoSectionFragment;
import com.salampakistan.ui.fragments.home.seasonexperiences.SeasonViewModel;
import com.salampakistan.ui.fragments.home.seasonexperiences.SeasonViewModel_Factory;
import com.salampakistan.ui.fragments.home.seasonexperiences.SeasonsSectionFragment;
import com.salampakistan.ui.fragments.home.whattodo.WhatToDoSectionFragment;
import com.salampakistan.ui.fragments.home.whattodo.WhatToDoSectionViewModel;
import com.salampakistan.ui.fragments.home.whattodo.WhatToDoSectionViewModel_Factory;
import com.salampakistan.ui.fragments.itinerary.ItineraryListFragment;
import com.salampakistan.ui.fragments.locationdetails.LocationDetailsFragment;
import com.salampakistan.ui.fragments.locationdetails.LocationDetailsViewModel;
import com.salampakistan.ui.fragments.locationdetails.LocationDetailsViewModel_Factory;
import com.salampakistan.ui.fragments.locationdetails.poi.POIFragment;
import com.salampakistan.ui.fragments.locationdetails.poi.POIViewModel;
import com.salampakistan.ui.fragments.locationdetails.poi.POIViewModel_Factory;
import com.salampakistan.ui.fragments.login.LoginFragment;
import com.salampakistan.ui.fragments.login.LoginRegisterViewModel;
import com.salampakistan.ui.fragments.login.LoginRegisterViewModel_Factory;
import com.salampakistan.ui.fragments.login.RegisterFragment;
import com.salampakistan.ui.fragments.map.MapFragment;
import com.salampakistan.ui.fragments.map.MapViewModel;
import com.salampakistan.ui.fragments.map.MapViewModel_Factory;
import com.salampakistan.ui.fragments.planning.PlanningFragment;
import com.salampakistan.ui.fragments.planning.PlanningViewModel;
import com.salampakistan.ui.fragments.planning.PlanningViewModel_Factory;
import com.salampakistan.ui.fragments.profile.AboutUsFragment;
import com.salampakistan.ui.fragments.profile.ContactUsFragment;
import com.salampakistan.ui.fragments.profile.ProfileFragment;
import com.salampakistan.ui.fragments.profile.ProfileOptionsFragment;
import com.salampakistan.ui.fragments.profile.update.UpdateProfileFragment;
import com.salampakistan.ui.fragments.profile.update.UpdateProfileViewModel;
import com.salampakistan.ui.fragments.profile.update.UpdateProfileViewModel_Factory;
import com.salampakistan.ui.fragments.profile.updatepassword.UpdatePasswordFragment;
import com.salampakistan.ui.fragments.profile.updatepassword.UpdatePasswordViewModel;
import com.salampakistan.ui.fragments.profile.updatepassword.UpdatePasswordViewModel_Factory;
import com.salampakistan.ui.fragments.reviews.ReviewsListFragment;
import com.salampakistan.ui.fragments.reviews.ReviewsListViewModel;
import com.salampakistan.ui.fragments.reviews.ReviewsListViewModel_Factory;
import com.salampakistan.ui.fragments.season.SeasonDetailsFragment;
import com.salampakistan.ui.fragments.tripdetails.TripDetailsFragment;
import com.salampakistan.ui.fragments.tripdetails.TripDetailsViewModel;
import com.salampakistan.ui.fragments.tripdetails.TripDetailsViewModel_Factory;
import com.salampakistan.ui.fragments.visastatus.CheckVisaStatusFragment;
import com.salampakistan.ui.fragments.visastatus.CheckVisaStatusViewModel;
import com.salampakistan.ui.fragments.visastatus.CheckVisaStatusViewModel_Factory;
import com.salampakistan.ui.fragments.weather.WeatherFragment;
import com.salampakistan.ui.fragments.weather.WeatherViewModel;
import com.salampakistan.ui.fragments.weather.WeatherViewModel_Factory;
import com.salampakistan.ui.fragments.whattodo.WhatToDoCategoryListFragment;
import com.salampakistan.ui.fragments.whattodo.WhatToDoCategoryListViewModel;
import com.salampakistan.ui.fragments.whattodo.WhatToDoCategoryListViewModel_Factory;
import com.salampakistan.ui.fragments.whattodo.WhatToDoListFragment;
import com.salampakistan.ui.fragments.whattodo.WhatToDoListViewModel;
import com.salampakistan.ui.fragments.whattodo.WhatToDoListViewModel_Factory;
import com.salampakistan.ui.fragments.wheretogo.WhereToGoCategoryListFragment;
import com.salampakistan.ui.fragments.wheretogo.WhereToGoCategoryListViewModel;
import com.salampakistan.ui.fragments.wheretogo.WhereToGoCategoryListViewModel_Factory;
import com.salampakistan.ui.fragments.wheretogo.WhereToGoListFragment;
import com.salampakistan.ui.fragments.wheretogo.WhereToGoListViewModel;
import com.salampakistan.ui.fragments.wheretogo.WhereToGoListViewModel_Factory;
import com.salampakistan.ui.fragments.wishlist.WishlistListFragment;
import com.salampakistan.ui.fragments.wishlist.WishlistViewModel;
import com.salampakistan.ui.fragments.wishlist.WishlistViewModel_Factory;
import com.salampakistan.utils.DialogUtils;
import com.salampakistan.utils.Preferences;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.converter.gson.GsonConverterFactory;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<MainActivityModule_ContributeMainActivity.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private Provider<Application> applicationProvider;

  private Provider<Preferences> providePreferencesProvider;

  private Provider<HttpLoggingInterceptor> provideLoggingInterceptorProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider2;

  private Provider<Gson> provideGsonProvider;

  private Provider<GsonConverterFactory> provideGsonConverterFactoryProvider;

  private Provider<WebService> provideWebServiceProvider;

  private Provider<TripsRepo> tripsRepoProvider;

  private Provider<FMAWebService> provideFMAWebServiceProvider;

  private Provider<FMARepo> fMARepoProvider;

  private Provider<HomeViewModel> homeViewModelProvider;

  private Provider<UsersRepo> usersRepoProvider;

  private Provider<LoginRegisterViewModel> loginRegisterViewModelProvider;

  private Provider<WhereToGoListViewModel> whereToGoListViewModelProvider;

  private Provider<ReviewsListViewModel> reviewsListViewModelProvider;

  private Provider<OpenWeatherService> provideOpenWeatherServiceProvider;

  private Provider<OpenWeatherRepo> openWeatherRepoProvider;

  private Provider<WeatherViewModel> weatherViewModelProvider;

  private Provider<OthersRepo> othersRepoProvider;

  private Provider<CurrencyViewModel> currencyViewModelProvider;

  private Provider<CheckVisaStatusViewModel> checkVisaStatusViewModelProvider;

  private Provider<WhatToDoSectionViewModel> whatToDoSectionViewModelProvider;

  private Provider<FlightBookingViewModel> flightBookingViewModelProvider;

  private Provider<WhereToGoCategoryListViewModel> whereToGoCategoryListViewModelProvider;

  private Provider<LocationDetailsViewModel> locationDetailsViewModelProvider;

  private Provider<WhatToDoListViewModel> whatToDoListViewModelProvider;

  private Provider<WhatToDoCategoryListViewModel> whatToDoCategoryListViewModelProvider;

  private Provider<POIViewModel> pOIViewModelProvider;

  private Provider<HotelBookingViewModel> hotelBookingViewModelProvider;

  private Provider<TrainBookingViewModel> trainBookingViewModelProvider;

  private Provider<TripDetailsViewModel> tripDetailsViewModelProvider;

  private Provider<UpdateProfileViewModel> updateProfileViewModelProvider;

  private Provider<WishlistViewModel> wishlistViewModelProvider;

  private Provider<ForgotPasswordViewModel> forgotPasswordViewModelProvider;

  private Provider<PlanningViewModel> planningViewModelProvider;

  private Provider<UpdatePasswordViewModel> updatePasswordViewModelProvider;

  private Provider<SeasonRepo> seasonRepoProvider;

  private Provider<SeasonViewModel> seasonViewModelProvider;

  private Provider<MapViewModel> mapViewModelProvider;

  private Provider<BookingRepo> bookingRepoProvider;

  private Provider<HotelListViewModel> hotelListViewModelProvider;

  private Provider<HotelDetailsViewModel> hotelDetailsViewModelProvider;

  private Provider<HotelBookingDetailsViewModel> hotelBookingDetailsViewModelProvider;

  private Provider<EventRepo> eventRepoProvider;

  private Provider<EventListViewModel> eventListViewModelProvider;

  private Provider<EventDetailsViewModel> eventDetailsViewModelProvider;

  private Provider<FlightListViewModel> flightListViewModelProvider;

  private Provider<BusBookingSearchViewModel> busBookingSearchViewModelProvider;

  private Provider<BusListViewModel> busListViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<ViewModelFactory> viewModelFactoryProvider;

  private DaggerAppComponent(AppModule appModuleParam, CoreDataModule coreDataModuleParam,
      Application applicationParam) {

    initialize(appModuleParam, coreDataModuleParam, applicationParam);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return Collections.<Class<?>, Provider<AndroidInjector.Factory<?>>>singletonMap(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider);}

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

  @SuppressWarnings("unchecked")
  private void initialize(final AppModule appModuleParam, final CoreDataModule coreDataModuleParam,
      final Application applicationParam) {
    this.mainActivitySubcomponentFactoryProvider = new Provider<MainActivityModule_ContributeMainActivity.MainActivitySubcomponent.Factory>() {
      @Override
      public MainActivityModule_ContributeMainActivity.MainActivitySubcomponent.Factory get() {
        return new MainActivitySubcomponentFactory();}
    };
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.providePreferencesProvider = DoubleCheck.provider(AppModule_ProvidePreferencesFactory.create(appModuleParam, applicationProvider));
    this.provideLoggingInterceptorProvider = CoreDataModule_ProvideLoggingInterceptorFactory.create(coreDataModuleParam);
    this.provideOkHttpClientProvider = CoreDataModule_ProvideOkHttpClientFactory.create(coreDataModuleParam, provideLoggingInterceptorProvider);
    this.provideOkHttpClientProvider2 = AppModule_ProvideOkHttpClientFactory.create(appModuleParam, provideOkHttpClientProvider);
    this.provideGsonProvider = DoubleCheck.provider(CoreDataModule_ProvideGsonFactory.create(coreDataModuleParam));
    this.provideGsonConverterFactoryProvider = DoubleCheck.provider(CoreDataModule_ProvideGsonConverterFactoryFactory.create(coreDataModuleParam, provideGsonProvider));
    this.provideWebServiceProvider = DoubleCheck.provider(AppModule_ProvideWebServiceFactory.create(appModuleParam, provideOkHttpClientProvider2, provideGsonConverterFactoryProvider));
    this.tripsRepoProvider = DoubleCheck.provider(TripsRepo_Factory.create(provideWebServiceProvider));
    this.provideFMAWebServiceProvider = DoubleCheck.provider(AppModule_ProvideFMAWebServiceFactory.create(appModuleParam, provideOkHttpClientProvider2, provideGsonConverterFactoryProvider));
    this.fMARepoProvider = DoubleCheck.provider(FMARepo_Factory.create(provideFMAWebServiceProvider));
    this.homeViewModelProvider = HomeViewModel_Factory.create(applicationProvider, tripsRepoProvider, fMARepoProvider);
    this.usersRepoProvider = DoubleCheck.provider(UsersRepo_Factory.create(provideWebServiceProvider));
    this.loginRegisterViewModelProvider = LoginRegisterViewModel_Factory.create(applicationProvider, usersRepoProvider);
    this.whereToGoListViewModelProvider = WhereToGoListViewModel_Factory.create(applicationProvider, tripsRepoProvider);
    this.reviewsListViewModelProvider = ReviewsListViewModel_Factory.create(applicationProvider, tripsRepoProvider);
    this.provideOpenWeatherServiceProvider = DoubleCheck.provider(AppModule_ProvideOpenWeatherServiceFactory.create(appModuleParam, provideOkHttpClientProvider2, provideGsonConverterFactoryProvider));
    this.openWeatherRepoProvider = DoubleCheck.provider(OpenWeatherRepo_Factory.create(provideOpenWeatherServiceProvider));
    this.weatherViewModelProvider = WeatherViewModel_Factory.create(applicationProvider, openWeatherRepoProvider);
    this.othersRepoProvider = DoubleCheck.provider(OthersRepo_Factory.create(provideWebServiceProvider));
    this.currencyViewModelProvider = CurrencyViewModel_Factory.create(applicationProvider, othersRepoProvider);
    this.checkVisaStatusViewModelProvider = CheckVisaStatusViewModel_Factory.create(applicationProvider, othersRepoProvider);
    this.whatToDoSectionViewModelProvider = WhatToDoSectionViewModel_Factory.create(applicationProvider, tripsRepoProvider);
    this.flightBookingViewModelProvider = FlightBookingViewModel_Factory.create(applicationProvider);
    this.whereToGoCategoryListViewModelProvider = WhereToGoCategoryListViewModel_Factory.create(applicationProvider, tripsRepoProvider);
    this.locationDetailsViewModelProvider = LocationDetailsViewModel_Factory.create(applicationProvider, tripsRepoProvider);
    this.whatToDoListViewModelProvider = WhatToDoListViewModel_Factory.create(applicationProvider, tripsRepoProvider);
    this.whatToDoCategoryListViewModelProvider = WhatToDoCategoryListViewModel_Factory.create(applicationProvider, tripsRepoProvider);
    this.pOIViewModelProvider = POIViewModel_Factory.create(applicationProvider, tripsRepoProvider);
    this.hotelBookingViewModelProvider = HotelBookingViewModel_Factory.create(applicationProvider);
    this.trainBookingViewModelProvider = TrainBookingViewModel_Factory.create(applicationProvider);
    this.tripDetailsViewModelProvider = TripDetailsViewModel_Factory.create(applicationProvider, tripsRepoProvider);
    this.updateProfileViewModelProvider = UpdateProfileViewModel_Factory.create(applicationProvider, usersRepoProvider);
    this.wishlistViewModelProvider = WishlistViewModel_Factory.create(applicationProvider, tripsRepoProvider);
    this.forgotPasswordViewModelProvider = ForgotPasswordViewModel_Factory.create(applicationProvider, usersRepoProvider);
    this.planningViewModelProvider = PlanningViewModel_Factory.create(applicationProvider, tripsRepoProvider);
    this.updatePasswordViewModelProvider = UpdatePasswordViewModel_Factory.create(applicationProvider, usersRepoProvider);
    this.seasonRepoProvider = DoubleCheck.provider(SeasonRepo_Factory.create(provideWebServiceProvider));
    this.seasonViewModelProvider = SeasonViewModel_Factory.create(applicationProvider, seasonRepoProvider);
    this.mapViewModelProvider = MapViewModel_Factory.create(applicationProvider, tripsRepoProvider);
    this.bookingRepoProvider = DoubleCheck.provider(BookingRepo_Factory.create(provideWebServiceProvider));
    this.hotelListViewModelProvider = HotelListViewModel_Factory.create(applicationProvider, bookingRepoProvider);
    this.hotelDetailsViewModelProvider = HotelDetailsViewModel_Factory.create(applicationProvider, othersRepoProvider);
    this.hotelBookingDetailsViewModelProvider = HotelBookingDetailsViewModel_Factory.create(applicationProvider, othersRepoProvider);
    this.eventRepoProvider = DoubleCheck.provider(EventRepo_Factory.create(provideWebServiceProvider));
    this.eventListViewModelProvider = EventListViewModel_Factory.create(applicationProvider, eventRepoProvider);
    this.eventDetailsViewModelProvider = EventDetailsViewModel_Factory.create(applicationProvider, eventRepoProvider);
    this.flightListViewModelProvider = FlightListViewModel_Factory.create(applicationProvider, eventRepoProvider);
    this.busBookingSearchViewModelProvider = BusBookingSearchViewModel_Factory.create(applicationProvider, bookingRepoProvider);
    this.busListViewModelProvider = BusListViewModel_Factory.create(applicationProvider, bookingRepoProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider = MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(32).put(HomeViewModel.class, (Provider) homeViewModelProvider).put(LoginRegisterViewModel.class, (Provider) loginRegisterViewModelProvider).put(WhereToGoListViewModel.class, (Provider) whereToGoListViewModelProvider).put(ReviewsListViewModel.class, (Provider) reviewsListViewModelProvider).put(WeatherViewModel.class, (Provider) weatherViewModelProvider).put(CurrencyViewModel.class, (Provider) currencyViewModelProvider).put(CheckVisaStatusViewModel.class, (Provider) checkVisaStatusViewModelProvider).put(WhatToDoSectionViewModel.class, (Provider) whatToDoSectionViewModelProvider).put(FlightBookingViewModel.class, (Provider) flightBookingViewModelProvider).put(WhereToGoCategoryListViewModel.class, (Provider) whereToGoCategoryListViewModelProvider).put(LocationDetailsViewModel.class, (Provider) locationDetailsViewModelProvider).put(WhatToDoListViewModel.class, (Provider) whatToDoListViewModelProvider).put(WhatToDoCategoryListViewModel.class, (Provider) whatToDoCategoryListViewModelProvider).put(POIViewModel.class, (Provider) pOIViewModelProvider).put(HotelBookingViewModel.class, (Provider) hotelBookingViewModelProvider).put(TrainBookingViewModel.class, (Provider) trainBookingViewModelProvider).put(TripDetailsViewModel.class, (Provider) tripDetailsViewModelProvider).put(UpdateProfileViewModel.class, (Provider) updateProfileViewModelProvider).put(WishlistViewModel.class, (Provider) wishlistViewModelProvider).put(ForgotPasswordViewModel.class, (Provider) forgotPasswordViewModelProvider).put(PlanningViewModel.class, (Provider) planningViewModelProvider).put(UpdatePasswordViewModel.class, (Provider) updatePasswordViewModelProvider).put(SeasonViewModel.class, (Provider) seasonViewModelProvider).put(MapViewModel.class, (Provider) mapViewModelProvider).put(HotelListViewModel.class, (Provider) hotelListViewModelProvider).put(HotelDetailsViewModel.class, (Provider) hotelDetailsViewModelProvider).put(HotelBookingDetailsViewModel.class, (Provider) hotelBookingDetailsViewModelProvider).put(EventListViewModel.class, (Provider) eventListViewModelProvider).put(EventDetailsViewModel.class, (Provider) eventDetailsViewModelProvider).put(FlightListViewModel.class, (Provider) flightListViewModelProvider).put(BusBookingSearchViewModel.class, (Provider) busBookingSearchViewModelProvider).put(BusListViewModel.class, (Provider) busListViewModelProvider).build();
    this.viewModelFactoryProvider = DoubleCheck.provider(ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
  }

  @Override
  public void inject(App application) {
    injectApp(application);}

  private App injectApp(App instance) {
    App_MembersInjector.injectDispatchingAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Application application;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerAppComponent(new AppModule(), new CoreDataModule(), application);
    }
  }

  private final class MainActivitySubcomponentFactory implements MainActivityModule_ContributeMainActivity.MainActivitySubcomponent.Factory {
    @Override
    public MainActivityModule_ContributeMainActivity.MainActivitySubcomponent create(
        MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl implements MainActivityModule_ContributeMainActivity.MainActivitySubcomponent {
    private Provider<FragmentBuildersModule_ContributeHomeFragment.HomeFragmentSubcomponent.Factory> homeFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeAboutUsFragment.AboutUsFragmentSubcomponent.Factory> aboutUsFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeContactUsFragment.ContactUsFragmentSubcomponent.Factory> contactUsFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeProfileFragment.ProfileFragmentSubcomponent.Factory> profileFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeProfileOptionsFragment.ProfileOptionsFragmentSubcomponent.Factory> profileOptionsFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeLoginFragment.LoginFragmentSubcomponent.Factory> loginFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeRegisterFragment.RegisterFragmentSubcomponent.Factory> registerFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeWhereToGoSectionFragment.WhereToGoSectionFragmentSubcomponent.Factory> whereToGoSectionFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeWhatToDoSectionFragment.WhatToDoSectionFragmentSubcomponent.Factory> whatToDoSectionFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeSeasonsSectionFragment.SeasonsSectionFragmentSubcomponent.Factory> seasonsSectionFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeTripsUCannotMissSectionFragment.TripsCannotMissSectionFragmentSubcomponent.Factory> tripsCannotMissSectionFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeExpertTipsSectionFragment.ExpertTipsSectionFragmentSubcomponent.Factory> expertTipsSectionFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeLocationDetailsFragment.LocationDetailsFragmentSubcomponent.Factory> locationDetailsFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeReviewsListFragment.ReviewsListFragmentSubcomponent.Factory> reviewsListFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeWishlistListFragment.WishlistListFragmentSubcomponent.Factory> wishlistListFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeItineraryListFragment.ItineraryListFragmentSubcomponent.Factory> itineraryListFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeLiveWeatherWidgetFragment.WeatherFragmentSubcomponent.Factory> weatherFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeLiveCurrencyWidgetFragment.CurrencyFragmentSubcomponent.Factory> currencyFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeCheckVisaStatusFragment.CheckVisaStatusFragmentSubcomponent.Factory> checkVisaStatusFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeBookingFragment.BookingFragmentSubcomponent.Factory> bookingFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeHotelBookingFragment.HotelBookingFragmentSubcomponent.Factory> hotelBookingFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeFlightBookingFragment.FlightBookingFragmentSubcomponent.Factory> flightBookingFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeTrainBookingFragment.TrainBookingFragmentSubcomponent.Factory> trainBookingFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeWhereToGoListFragment.WhereToGoListFragmentSubcomponent.Factory> whereToGoListFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeWhereToGoCategoryListFragment.WhereToGoCategoryListFragmentSubcomponent.Factory> whereToGoCategoryListFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeImageCarouselFragment.ImageCarouselFragmentSubcomponent.Factory> imageCarouselFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeWhatToDoListFragment.WhatToDoListFragmentSubcomponent.Factory> whatToDoListFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeWhatToDoCategoryListFragment.WhatToDoCategoryListFragmentSubcomponent.Factory> whatToDoCategoryListFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributePOIFragment.POIFragmentSubcomponent.Factory> pOIFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeTripDetailsFragment.TripDetailsFragmentSubcomponent.Factory> tripDetailsFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeSeasonDetailsFragment.SeasonDetailsFragmentSubcomponent.Factory> seasonDetailsFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeUpdateProfileFragment.UpdateProfileFragmentSubcomponent.Factory> updateProfileFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeForgotPasswordFragment.ForgotPasswordFragmentSubcomponent.Factory> forgotPasswordFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributePlanningFragment.PlanningFragmentSubcomponent.Factory> planningFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeUpdateFragment.UpdatePasswordFragmentSubcomponent.Factory> updatePasswordFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeMapFragment.MapFragmentSubcomponent.Factory> mapFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeHotelListFragment.HotelListFragmentSubcomponent.Factory> hotelListFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeHotelDetailsFragment.HotelDetailsFragmentSubcomponent.Factory> hotelDetailsFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeHotelBookingDetailsFragment.HotelBookingDetailsFragmentSubcomponent.Factory> hotelBookingDetailsFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeEventListFragment.EventListFragmentSubcomponent.Factory> eventListFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeEventDetailsFragment.EventDetailsFragmentSubcomponent.Factory> eventDetailsFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeFlightListFragment.FlightListFragmentSubcomponent.Factory> flightListFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeBusBookingSearchFragment.BusBookingSearchFragmentSubcomponent.Factory> busBookingSearchFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeBusListFragment.BusListFragmentSubcomponent.Factory> busListFragmentSubcomponentFactoryProvider;

    private MainActivitySubcomponentImpl(MainActivity arg0) {

      initialize(arg0);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(45).put(MainActivity.class, (Provider) DaggerAppComponent.this.mainActivitySubcomponentFactoryProvider).put(HomeFragment.class, (Provider) homeFragmentSubcomponentFactoryProvider).put(AboutUsFragment.class, (Provider) aboutUsFragmentSubcomponentFactoryProvider).put(ContactUsFragment.class, (Provider) contactUsFragmentSubcomponentFactoryProvider).put(ProfileFragment.class, (Provider) profileFragmentSubcomponentFactoryProvider).put(ProfileOptionsFragment.class, (Provider) profileOptionsFragmentSubcomponentFactoryProvider).put(LoginFragment.class, (Provider) loginFragmentSubcomponentFactoryProvider).put(RegisterFragment.class, (Provider) registerFragmentSubcomponentFactoryProvider).put(WhereToGoSectionFragment.class, (Provider) whereToGoSectionFragmentSubcomponentFactoryProvider).put(WhatToDoSectionFragment.class, (Provider) whatToDoSectionFragmentSubcomponentFactoryProvider).put(SeasonsSectionFragment.class, (Provider) seasonsSectionFragmentSubcomponentFactoryProvider).put(TripsCannotMissSectionFragment.class, (Provider) tripsCannotMissSectionFragmentSubcomponentFactoryProvider).put(ExpertTipsSectionFragment.class, (Provider) expertTipsSectionFragmentSubcomponentFactoryProvider).put(LocationDetailsFragment.class, (Provider) locationDetailsFragmentSubcomponentFactoryProvider).put(ReviewsListFragment.class, (Provider) reviewsListFragmentSubcomponentFactoryProvider).put(WishlistListFragment.class, (Provider) wishlistListFragmentSubcomponentFactoryProvider).put(ItineraryListFragment.class, (Provider) itineraryListFragmentSubcomponentFactoryProvider).put(WeatherFragment.class, (Provider) weatherFragmentSubcomponentFactoryProvider).put(CurrencyFragment.class, (Provider) currencyFragmentSubcomponentFactoryProvider).put(CheckVisaStatusFragment.class, (Provider) checkVisaStatusFragmentSubcomponentFactoryProvider).put(BookingFragment.class, (Provider) bookingFragmentSubcomponentFactoryProvider).put(HotelBookingFragment.class, (Provider) hotelBookingFragmentSubcomponentFactoryProvider).put(FlightBookingFragment.class, (Provider) flightBookingFragmentSubcomponentFactoryProvider).put(TrainBookingFragment.class, (Provider) trainBookingFragmentSubcomponentFactoryProvider).put(WhereToGoListFragment.class, (Provider) whereToGoListFragmentSubcomponentFactoryProvider).put(WhereToGoCategoryListFragment.class, (Provider) whereToGoCategoryListFragmentSubcomponentFactoryProvider).put(ImageCarouselFragment.class, (Provider) imageCarouselFragmentSubcomponentFactoryProvider).put(WhatToDoListFragment.class, (Provider) whatToDoListFragmentSubcomponentFactoryProvider).put(WhatToDoCategoryListFragment.class, (Provider) whatToDoCategoryListFragmentSubcomponentFactoryProvider).put(POIFragment.class, (Provider) pOIFragmentSubcomponentFactoryProvider).put(TripDetailsFragment.class, (Provider) tripDetailsFragmentSubcomponentFactoryProvider).put(SeasonDetailsFragment.class, (Provider) seasonDetailsFragmentSubcomponentFactoryProvider).put(UpdateProfileFragment.class, (Provider) updateProfileFragmentSubcomponentFactoryProvider).put(ForgotPasswordFragment.class, (Provider) forgotPasswordFragmentSubcomponentFactoryProvider).put(PlanningFragment.class, (Provider) planningFragmentSubcomponentFactoryProvider).put(UpdatePasswordFragment.class, (Provider) updatePasswordFragmentSubcomponentFactoryProvider).put(MapFragment.class, (Provider) mapFragmentSubcomponentFactoryProvider).put(HotelListFragment.class, (Provider) hotelListFragmentSubcomponentFactoryProvider).put(HotelDetailsFragment.class, (Provider) hotelDetailsFragmentSubcomponentFactoryProvider).put(HotelBookingDetailsFragment.class, (Provider) hotelBookingDetailsFragmentSubcomponentFactoryProvider).put(EventListFragment.class, (Provider) eventListFragmentSubcomponentFactoryProvider).put(EventDetailsFragment.class, (Provider) eventDetailsFragmentSubcomponentFactoryProvider).put(FlightListFragment.class, (Provider) flightListFragmentSubcomponentFactoryProvider).put(BusBookingSearchFragment.class, (Provider) busBookingSearchFragmentSubcomponentFactoryProvider).put(BusListFragment.class, (Provider) busListFragmentSubcomponentFactoryProvider).build();}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivity arg0) {
      this.homeFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeHomeFragment.HomeFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeHomeFragment.HomeFragmentSubcomponent.Factory get(
            ) {
          return new HomeFragmentSubcomponentFactory();}
      };
      this.aboutUsFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeAboutUsFragment.AboutUsFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeAboutUsFragment.AboutUsFragmentSubcomponent.Factory get(
            ) {
          return new AboutUsFragmentSubcomponentFactory();}
      };
      this.contactUsFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeContactUsFragment.ContactUsFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeContactUsFragment.ContactUsFragmentSubcomponent.Factory get(
            ) {
          return new ContactUsFragmentSubcomponentFactory();}
      };
      this.profileFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeProfileFragment.ProfileFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeProfileFragment.ProfileFragmentSubcomponent.Factory get(
            ) {
          return new ProfileFragmentSubcomponentFactory();}
      };
      this.profileOptionsFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeProfileOptionsFragment.ProfileOptionsFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeProfileOptionsFragment.ProfileOptionsFragmentSubcomponent.Factory get(
            ) {
          return new ProfileOptionsFragmentSubcomponentFactory();}
      };
      this.loginFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeLoginFragment.LoginFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeLoginFragment.LoginFragmentSubcomponent.Factory get(
            ) {
          return new LoginFragmentSubcomponentFactory();}
      };
      this.registerFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeRegisterFragment.RegisterFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeRegisterFragment.RegisterFragmentSubcomponent.Factory get(
            ) {
          return new RegisterFragmentSubcomponentFactory();}
      };
      this.whereToGoSectionFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeWhereToGoSectionFragment.WhereToGoSectionFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeWhereToGoSectionFragment.WhereToGoSectionFragmentSubcomponent.Factory get(
            ) {
          return new WhereToGoSectionFragmentSubcomponentFactory();}
      };
      this.whatToDoSectionFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeWhatToDoSectionFragment.WhatToDoSectionFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeWhatToDoSectionFragment.WhatToDoSectionFragmentSubcomponent.Factory get(
            ) {
          return new WhatToDoSectionFragmentSubcomponentFactory();}
      };
      this.seasonsSectionFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeSeasonsSectionFragment.SeasonsSectionFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeSeasonsSectionFragment.SeasonsSectionFragmentSubcomponent.Factory get(
            ) {
          return new SeasonsSectionFragmentSubcomponentFactory();}
      };
      this.tripsCannotMissSectionFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeTripsUCannotMissSectionFragment.TripsCannotMissSectionFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeTripsUCannotMissSectionFragment.TripsCannotMissSectionFragmentSubcomponent.Factory get(
            ) {
          return new TripsCannotMissSectionFragmentSubcomponentFactory();}
      };
      this.expertTipsSectionFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeExpertTipsSectionFragment.ExpertTipsSectionFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeExpertTipsSectionFragment.ExpertTipsSectionFragmentSubcomponent.Factory get(
            ) {
          return new ExpertTipsSectionFragmentSubcomponentFactory();}
      };
      this.locationDetailsFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeLocationDetailsFragment.LocationDetailsFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeLocationDetailsFragment.LocationDetailsFragmentSubcomponent.Factory get(
            ) {
          return new LocationDetailsFragmentSubcomponentFactory();}
      };
      this.reviewsListFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeReviewsListFragment.ReviewsListFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeReviewsListFragment.ReviewsListFragmentSubcomponent.Factory get(
            ) {
          return new ReviewsListFragmentSubcomponentFactory();}
      };
      this.wishlistListFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeWishlistListFragment.WishlistListFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeWishlistListFragment.WishlistListFragmentSubcomponent.Factory get(
            ) {
          return new WishlistListFragmentSubcomponentFactory();}
      };
      this.itineraryListFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeItineraryListFragment.ItineraryListFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeItineraryListFragment.ItineraryListFragmentSubcomponent.Factory get(
            ) {
          return new ItineraryListFragmentSubcomponentFactory();}
      };
      this.weatherFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeLiveWeatherWidgetFragment.WeatherFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeLiveWeatherWidgetFragment.WeatherFragmentSubcomponent.Factory get(
            ) {
          return new WeatherFragmentSubcomponentFactory();}
      };
      this.currencyFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeLiveCurrencyWidgetFragment.CurrencyFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeLiveCurrencyWidgetFragment.CurrencyFragmentSubcomponent.Factory get(
            ) {
          return new CurrencyFragmentSubcomponentFactory();}
      };
      this.checkVisaStatusFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeCheckVisaStatusFragment.CheckVisaStatusFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeCheckVisaStatusFragment.CheckVisaStatusFragmentSubcomponent.Factory get(
            ) {
          return new CheckVisaStatusFragmentSubcomponentFactory();}
      };
      this.bookingFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeBookingFragment.BookingFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeBookingFragment.BookingFragmentSubcomponent.Factory get(
            ) {
          return new BookingFragmentSubcomponentFactory();}
      };
      this.hotelBookingFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeHotelBookingFragment.HotelBookingFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeHotelBookingFragment.HotelBookingFragmentSubcomponent.Factory get(
            ) {
          return new HotelBookingFragmentSubcomponentFactory();}
      };
      this.flightBookingFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeFlightBookingFragment.FlightBookingFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeFlightBookingFragment.FlightBookingFragmentSubcomponent.Factory get(
            ) {
          return new FlightBookingFragmentSubcomponentFactory();}
      };
      this.trainBookingFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeTrainBookingFragment.TrainBookingFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeTrainBookingFragment.TrainBookingFragmentSubcomponent.Factory get(
            ) {
          return new TrainBookingFragmentSubcomponentFactory();}
      };
      this.whereToGoListFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeWhereToGoListFragment.WhereToGoListFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeWhereToGoListFragment.WhereToGoListFragmentSubcomponent.Factory get(
            ) {
          return new WhereToGoListFragmentSubcomponentFactory();}
      };
      this.whereToGoCategoryListFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeWhereToGoCategoryListFragment.WhereToGoCategoryListFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeWhereToGoCategoryListFragment.WhereToGoCategoryListFragmentSubcomponent.Factory get(
            ) {
          return new WhereToGoCategoryListFragmentSubcomponentFactory();}
      };
      this.imageCarouselFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeImageCarouselFragment.ImageCarouselFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeImageCarouselFragment.ImageCarouselFragmentSubcomponent.Factory get(
            ) {
          return new ImageCarouselFragmentSubcomponentFactory();}
      };
      this.whatToDoListFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeWhatToDoListFragment.WhatToDoListFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeWhatToDoListFragment.WhatToDoListFragmentSubcomponent.Factory get(
            ) {
          return new WhatToDoListFragmentSubcomponentFactory();}
      };
      this.whatToDoCategoryListFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeWhatToDoCategoryListFragment.WhatToDoCategoryListFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeWhatToDoCategoryListFragment.WhatToDoCategoryListFragmentSubcomponent.Factory get(
            ) {
          return new WhatToDoCategoryListFragmentSubcomponentFactory();}
      };
      this.pOIFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributePOIFragment.POIFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributePOIFragment.POIFragmentSubcomponent.Factory get() {
          return new POIFragmentSubcomponentFactory();}
      };
      this.tripDetailsFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeTripDetailsFragment.TripDetailsFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeTripDetailsFragment.TripDetailsFragmentSubcomponent.Factory get(
            ) {
          return new TripDetailsFragmentSubcomponentFactory();}
      };
      this.seasonDetailsFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeSeasonDetailsFragment.SeasonDetailsFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeSeasonDetailsFragment.SeasonDetailsFragmentSubcomponent.Factory get(
            ) {
          return new SeasonDetailsFragmentSubcomponentFactory();}
      };
      this.updateProfileFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeUpdateProfileFragment.UpdateProfileFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeUpdateProfileFragment.UpdateProfileFragmentSubcomponent.Factory get(
            ) {
          return new UpdateProfileFragmentSubcomponentFactory();}
      };
      this.forgotPasswordFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeForgotPasswordFragment.ForgotPasswordFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeForgotPasswordFragment.ForgotPasswordFragmentSubcomponent.Factory get(
            ) {
          return new ForgotPasswordFragmentSubcomponentFactory();}
      };
      this.planningFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributePlanningFragment.PlanningFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributePlanningFragment.PlanningFragmentSubcomponent.Factory get(
            ) {
          return new PlanningFragmentSubcomponentFactory();}
      };
      this.updatePasswordFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeUpdateFragment.UpdatePasswordFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeUpdateFragment.UpdatePasswordFragmentSubcomponent.Factory get(
            ) {
          return new UpdatePasswordFragmentSubcomponentFactory();}
      };
      this.mapFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeMapFragment.MapFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeMapFragment.MapFragmentSubcomponent.Factory get() {
          return new MapFragmentSubcomponentFactory();}
      };
      this.hotelListFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeHotelListFragment.HotelListFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeHotelListFragment.HotelListFragmentSubcomponent.Factory get(
            ) {
          return new HotelListFragmentSubcomponentFactory();}
      };
      this.hotelDetailsFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeHotelDetailsFragment.HotelDetailsFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeHotelDetailsFragment.HotelDetailsFragmentSubcomponent.Factory get(
            ) {
          return new HotelDetailsFragmentSubcomponentFactory();}
      };
      this.hotelBookingDetailsFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeHotelBookingDetailsFragment.HotelBookingDetailsFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeHotelBookingDetailsFragment.HotelBookingDetailsFragmentSubcomponent.Factory get(
            ) {
          return new HotelBookingDetailsFragmentSubcomponentFactory();}
      };
      this.eventListFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeEventListFragment.EventListFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeEventListFragment.EventListFragmentSubcomponent.Factory get(
            ) {
          return new EventListFragmentSubcomponentFactory();}
      };
      this.eventDetailsFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeEventDetailsFragment.EventDetailsFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeEventDetailsFragment.EventDetailsFragmentSubcomponent.Factory get(
            ) {
          return new EventDetailsFragmentSubcomponentFactory();}
      };
      this.flightListFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeFlightListFragment.FlightListFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeFlightListFragment.FlightListFragmentSubcomponent.Factory get(
            ) {
          return new FlightListFragmentSubcomponentFactory();}
      };
      this.busBookingSearchFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeBusBookingSearchFragment.BusBookingSearchFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeBusBookingSearchFragment.BusBookingSearchFragmentSubcomponent.Factory get(
            ) {
          return new BusBookingSearchFragmentSubcomponentFactory();}
      };
      this.busListFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeBusListFragment.BusListFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeBusListFragment.BusListFragmentSubcomponent.Factory get(
            ) {
          return new BusListFragmentSubcomponentFactory();}
      };
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);}

    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectDispatchingAndroidInjector(instance, getDispatchingAndroidInjectorOfFragment());
      return instance;
    }

    private final class HomeFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeHomeFragment.HomeFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeHomeFragment.HomeFragmentSubcomponent create(
          HomeFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new HomeFragmentSubcomponentImpl(arg0);
      }
    }

    private final class HomeFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeHomeFragment.HomeFragmentSubcomponent {
      private HomeFragmentSubcomponentImpl(HomeFragment arg0) {

      }

      @Override
      public void inject(HomeFragment arg0) {
        injectHomeFragment(arg0);}

      private HomeFragment injectHomeFragment(HomeFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class AboutUsFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeAboutUsFragment.AboutUsFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeAboutUsFragment.AboutUsFragmentSubcomponent create(
          AboutUsFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new AboutUsFragmentSubcomponentImpl(arg0);
      }
    }

    private final class AboutUsFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeAboutUsFragment.AboutUsFragmentSubcomponent {
      private AboutUsFragmentSubcomponentImpl(AboutUsFragment arg0) {

      }

      @Override
      public void inject(AboutUsFragment arg0) {
        injectAboutUsFragment(arg0);}

      private AboutUsFragment injectAboutUsFragment(AboutUsFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class ContactUsFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeContactUsFragment.ContactUsFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeContactUsFragment.ContactUsFragmentSubcomponent create(
          ContactUsFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new ContactUsFragmentSubcomponentImpl(arg0);
      }
    }

    private final class ContactUsFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeContactUsFragment.ContactUsFragmentSubcomponent {
      private ContactUsFragmentSubcomponentImpl(ContactUsFragment arg0) {

      }

      @Override
      public void inject(ContactUsFragment arg0) {
        injectContactUsFragment(arg0);}

      private ContactUsFragment injectContactUsFragment(ContactUsFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class ProfileFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeProfileFragment.ProfileFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeProfileFragment.ProfileFragmentSubcomponent create(
          ProfileFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new ProfileFragmentSubcomponentImpl(arg0);
      }
    }

    private final class ProfileFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeProfileFragment.ProfileFragmentSubcomponent {
      private ProfileFragmentSubcomponentImpl(ProfileFragment arg0) {

      }

      @Override
      public void inject(ProfileFragment arg0) {
        injectProfileFragment(arg0);}

      private ProfileFragment injectProfileFragment(ProfileFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class ProfileOptionsFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeProfileOptionsFragment.ProfileOptionsFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeProfileOptionsFragment.ProfileOptionsFragmentSubcomponent create(
          ProfileOptionsFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new ProfileOptionsFragmentSubcomponentImpl(arg0);
      }
    }

    private final class ProfileOptionsFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeProfileOptionsFragment.ProfileOptionsFragmentSubcomponent {
      private ProfileOptionsFragmentSubcomponentImpl(ProfileOptionsFragment arg0) {

      }

      @Override
      public void inject(ProfileOptionsFragment arg0) {
        injectProfileOptionsFragment(arg0);}

      private ProfileOptionsFragment injectProfileOptionsFragment(ProfileOptionsFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class LoginFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeLoginFragment.LoginFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeLoginFragment.LoginFragmentSubcomponent create(
          LoginFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new LoginFragmentSubcomponentImpl(arg0);
      }
    }

    private final class LoginFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeLoginFragment.LoginFragmentSubcomponent {
      private LoginFragmentSubcomponentImpl(LoginFragment arg0) {

      }

      @Override
      public void inject(LoginFragment arg0) {
        injectLoginFragment(arg0);}

      private LoginFragment injectLoginFragment(LoginFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class RegisterFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeRegisterFragment.RegisterFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeRegisterFragment.RegisterFragmentSubcomponent create(
          RegisterFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new RegisterFragmentSubcomponentImpl(arg0);
      }
    }

    private final class RegisterFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeRegisterFragment.RegisterFragmentSubcomponent {
      private RegisterFragmentSubcomponentImpl(RegisterFragment arg0) {

      }

      @Override
      public void inject(RegisterFragment arg0) {
        injectRegisterFragment(arg0);}

      private RegisterFragment injectRegisterFragment(RegisterFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class WhereToGoSectionFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeWhereToGoSectionFragment.WhereToGoSectionFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeWhereToGoSectionFragment.WhereToGoSectionFragmentSubcomponent create(
          WhereToGoSectionFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new WhereToGoSectionFragmentSubcomponentImpl(arg0);
      }
    }

    private final class WhereToGoSectionFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeWhereToGoSectionFragment.WhereToGoSectionFragmentSubcomponent {
      private WhereToGoSectionFragmentSubcomponentImpl(WhereToGoSectionFragment arg0) {

      }

      @Override
      public void inject(WhereToGoSectionFragment arg0) {
        injectWhereToGoSectionFragment(arg0);}

      private WhereToGoSectionFragment injectWhereToGoSectionFragment(
          WhereToGoSectionFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class WhatToDoSectionFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeWhatToDoSectionFragment.WhatToDoSectionFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeWhatToDoSectionFragment.WhatToDoSectionFragmentSubcomponent create(
          WhatToDoSectionFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new WhatToDoSectionFragmentSubcomponentImpl(arg0);
      }
    }

    private final class WhatToDoSectionFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeWhatToDoSectionFragment.WhatToDoSectionFragmentSubcomponent {
      private WhatToDoSectionFragmentSubcomponentImpl(WhatToDoSectionFragment arg0) {

      }

      @Override
      public void inject(WhatToDoSectionFragment arg0) {
        injectWhatToDoSectionFragment(arg0);}

      private WhatToDoSectionFragment injectWhatToDoSectionFragment(
          WhatToDoSectionFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class SeasonsSectionFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeSeasonsSectionFragment.SeasonsSectionFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeSeasonsSectionFragment.SeasonsSectionFragmentSubcomponent create(
          SeasonsSectionFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new SeasonsSectionFragmentSubcomponentImpl(arg0);
      }
    }

    private final class SeasonsSectionFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeSeasonsSectionFragment.SeasonsSectionFragmentSubcomponent {
      private SeasonsSectionFragmentSubcomponentImpl(SeasonsSectionFragment arg0) {

      }

      @Override
      public void inject(SeasonsSectionFragment arg0) {
        injectSeasonsSectionFragment(arg0);}

      private SeasonsSectionFragment injectSeasonsSectionFragment(SeasonsSectionFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class TripsCannotMissSectionFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeTripsUCannotMissSectionFragment.TripsCannotMissSectionFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeTripsUCannotMissSectionFragment.TripsCannotMissSectionFragmentSubcomponent create(
          TripsCannotMissSectionFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new TripsCannotMissSectionFragmentSubcomponentImpl(arg0);
      }
    }

    private final class TripsCannotMissSectionFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeTripsUCannotMissSectionFragment.TripsCannotMissSectionFragmentSubcomponent {
      private TripsCannotMissSectionFragmentSubcomponentImpl(TripsCannotMissSectionFragment arg0) {

      }

      @Override
      public void inject(TripsCannotMissSectionFragment arg0) {
        injectTripsCannotMissSectionFragment(arg0);}

      private TripsCannotMissSectionFragment injectTripsCannotMissSectionFragment(
          TripsCannotMissSectionFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class ExpertTipsSectionFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeExpertTipsSectionFragment.ExpertTipsSectionFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeExpertTipsSectionFragment.ExpertTipsSectionFragmentSubcomponent create(
          ExpertTipsSectionFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new ExpertTipsSectionFragmentSubcomponentImpl(arg0);
      }
    }

    private final class ExpertTipsSectionFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeExpertTipsSectionFragment.ExpertTipsSectionFragmentSubcomponent {
      private ExpertTipsSectionFragmentSubcomponentImpl(ExpertTipsSectionFragment arg0) {

      }

      @Override
      public void inject(ExpertTipsSectionFragment arg0) {
        injectExpertTipsSectionFragment(arg0);}

      private ExpertTipsSectionFragment injectExpertTipsSectionFragment(
          ExpertTipsSectionFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class LocationDetailsFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeLocationDetailsFragment.LocationDetailsFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeLocationDetailsFragment.LocationDetailsFragmentSubcomponent create(
          LocationDetailsFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new LocationDetailsFragmentSubcomponentImpl(arg0);
      }
    }

    private final class LocationDetailsFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeLocationDetailsFragment.LocationDetailsFragmentSubcomponent {
      private LocationDetailsFragmentSubcomponentImpl(LocationDetailsFragment arg0) {

      }

      @Override
      public void inject(LocationDetailsFragment arg0) {
        injectLocationDetailsFragment(arg0);}

      private LocationDetailsFragment injectLocationDetailsFragment(
          LocationDetailsFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class ReviewsListFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeReviewsListFragment.ReviewsListFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeReviewsListFragment.ReviewsListFragmentSubcomponent create(
          ReviewsListFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new ReviewsListFragmentSubcomponentImpl(arg0);
      }
    }

    private final class ReviewsListFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeReviewsListFragment.ReviewsListFragmentSubcomponent {
      private ReviewsListFragmentSubcomponentImpl(ReviewsListFragment arg0) {

      }

      @Override
      public void inject(ReviewsListFragment arg0) {
        injectReviewsListFragment(arg0);}

      private ReviewsListFragment injectReviewsListFragment(ReviewsListFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class WishlistListFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeWishlistListFragment.WishlistListFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeWishlistListFragment.WishlistListFragmentSubcomponent create(
          WishlistListFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new WishlistListFragmentSubcomponentImpl(arg0);
      }
    }

    private final class WishlistListFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeWishlistListFragment.WishlistListFragmentSubcomponent {
      private WishlistListFragmentSubcomponentImpl(WishlistListFragment arg0) {

      }

      @Override
      public void inject(WishlistListFragment arg0) {
        injectWishlistListFragment(arg0);}

      private WishlistListFragment injectWishlistListFragment(WishlistListFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class ItineraryListFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeItineraryListFragment.ItineraryListFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeItineraryListFragment.ItineraryListFragmentSubcomponent create(
          ItineraryListFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new ItineraryListFragmentSubcomponentImpl(arg0);
      }
    }

    private final class ItineraryListFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeItineraryListFragment.ItineraryListFragmentSubcomponent {
      private ItineraryListFragmentSubcomponentImpl(ItineraryListFragment arg0) {

      }

      @Override
      public void inject(ItineraryListFragment arg0) {
        injectItineraryListFragment(arg0);}

      private ItineraryListFragment injectItineraryListFragment(ItineraryListFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class WeatherFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeLiveWeatherWidgetFragment.WeatherFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeLiveWeatherWidgetFragment.WeatherFragmentSubcomponent create(
          WeatherFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new WeatherFragmentSubcomponentImpl(arg0);
      }
    }

    private final class WeatherFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeLiveWeatherWidgetFragment.WeatherFragmentSubcomponent {
      private WeatherFragmentSubcomponentImpl(WeatherFragment arg0) {

      }

      @Override
      public void inject(WeatherFragment arg0) {
        injectWeatherFragment(arg0);}

      private WeatherFragment injectWeatherFragment(WeatherFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class CurrencyFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeLiveCurrencyWidgetFragment.CurrencyFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeLiveCurrencyWidgetFragment.CurrencyFragmentSubcomponent create(
          CurrencyFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new CurrencyFragmentSubcomponentImpl(arg0);
      }
    }

    private final class CurrencyFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeLiveCurrencyWidgetFragment.CurrencyFragmentSubcomponent {
      private CurrencyFragmentSubcomponentImpl(CurrencyFragment arg0) {

      }

      @Override
      public void inject(CurrencyFragment arg0) {
        injectCurrencyFragment(arg0);}

      private CurrencyFragment injectCurrencyFragment(CurrencyFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class CheckVisaStatusFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeCheckVisaStatusFragment.CheckVisaStatusFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeCheckVisaStatusFragment.CheckVisaStatusFragmentSubcomponent create(
          CheckVisaStatusFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new CheckVisaStatusFragmentSubcomponentImpl(arg0);
      }
    }

    private final class CheckVisaStatusFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeCheckVisaStatusFragment.CheckVisaStatusFragmentSubcomponent {
      private CheckVisaStatusFragmentSubcomponentImpl(CheckVisaStatusFragment arg0) {

      }

      @Override
      public void inject(CheckVisaStatusFragment arg0) {
        injectCheckVisaStatusFragment(arg0);}

      private CheckVisaStatusFragment injectCheckVisaStatusFragment(
          CheckVisaStatusFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class BookingFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeBookingFragment.BookingFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeBookingFragment.BookingFragmentSubcomponent create(
          BookingFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new BookingFragmentSubcomponentImpl(arg0);
      }
    }

    private final class BookingFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeBookingFragment.BookingFragmentSubcomponent {
      private BookingFragmentSubcomponentImpl(BookingFragment arg0) {

      }

      @Override
      public void inject(BookingFragment arg0) {
        injectBookingFragment(arg0);}

      private BookingFragment injectBookingFragment(BookingFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class HotelBookingFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeHotelBookingFragment.HotelBookingFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeHotelBookingFragment.HotelBookingFragmentSubcomponent create(
          HotelBookingFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new HotelBookingFragmentSubcomponentImpl(arg0);
      }
    }

    private final class HotelBookingFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeHotelBookingFragment.HotelBookingFragmentSubcomponent {
      private HotelBookingFragmentSubcomponentImpl(HotelBookingFragment arg0) {

      }

      @Override
      public void inject(HotelBookingFragment arg0) {
        injectHotelBookingFragment(arg0);}

      private HotelBookingFragment injectHotelBookingFragment(HotelBookingFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class FlightBookingFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeFlightBookingFragment.FlightBookingFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeFlightBookingFragment.FlightBookingFragmentSubcomponent create(
          FlightBookingFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new FlightBookingFragmentSubcomponentImpl(arg0);
      }
    }

    private final class FlightBookingFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeFlightBookingFragment.FlightBookingFragmentSubcomponent {
      private FlightBookingFragmentSubcomponentImpl(FlightBookingFragment arg0) {

      }

      @Override
      public void inject(FlightBookingFragment arg0) {
        injectFlightBookingFragment(arg0);}

      private FlightBookingFragment injectFlightBookingFragment(FlightBookingFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class TrainBookingFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeTrainBookingFragment.TrainBookingFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeTrainBookingFragment.TrainBookingFragmentSubcomponent create(
          TrainBookingFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new TrainBookingFragmentSubcomponentImpl(arg0);
      }
    }

    private final class TrainBookingFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeTrainBookingFragment.TrainBookingFragmentSubcomponent {
      private TrainBookingFragmentSubcomponentImpl(TrainBookingFragment arg0) {

      }

      @Override
      public void inject(TrainBookingFragment arg0) {
        injectTrainBookingFragment(arg0);}

      private TrainBookingFragment injectTrainBookingFragment(TrainBookingFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class WhereToGoListFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeWhereToGoListFragment.WhereToGoListFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeWhereToGoListFragment.WhereToGoListFragmentSubcomponent create(
          WhereToGoListFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new WhereToGoListFragmentSubcomponentImpl(arg0);
      }
    }

    private final class WhereToGoListFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeWhereToGoListFragment.WhereToGoListFragmentSubcomponent {
      private WhereToGoListFragmentSubcomponentImpl(WhereToGoListFragment arg0) {

      }

      @Override
      public void inject(WhereToGoListFragment arg0) {
        injectWhereToGoListFragment(arg0);}

      private WhereToGoListFragment injectWhereToGoListFragment(WhereToGoListFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class WhereToGoCategoryListFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeWhereToGoCategoryListFragment.WhereToGoCategoryListFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeWhereToGoCategoryListFragment.WhereToGoCategoryListFragmentSubcomponent create(
          WhereToGoCategoryListFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new WhereToGoCategoryListFragmentSubcomponentImpl(arg0);
      }
    }

    private final class WhereToGoCategoryListFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeWhereToGoCategoryListFragment.WhereToGoCategoryListFragmentSubcomponent {
      private WhereToGoCategoryListFragmentSubcomponentImpl(WhereToGoCategoryListFragment arg0) {

      }

      @Override
      public void inject(WhereToGoCategoryListFragment arg0) {
        injectWhereToGoCategoryListFragment(arg0);}

      private WhereToGoCategoryListFragment injectWhereToGoCategoryListFragment(
          WhereToGoCategoryListFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class ImageCarouselFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeImageCarouselFragment.ImageCarouselFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeImageCarouselFragment.ImageCarouselFragmentSubcomponent create(
          ImageCarouselFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new ImageCarouselFragmentSubcomponentImpl(arg0);
      }
    }

    private final class ImageCarouselFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeImageCarouselFragment.ImageCarouselFragmentSubcomponent {
      private ImageCarouselFragmentSubcomponentImpl(ImageCarouselFragment arg0) {

      }

      @Override
      public void inject(ImageCarouselFragment arg0) {
        injectImageCarouselFragment(arg0);}

      private ImageCarouselFragment injectImageCarouselFragment(ImageCarouselFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class WhatToDoListFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeWhatToDoListFragment.WhatToDoListFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeWhatToDoListFragment.WhatToDoListFragmentSubcomponent create(
          WhatToDoListFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new WhatToDoListFragmentSubcomponentImpl(arg0);
      }
    }

    private final class WhatToDoListFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeWhatToDoListFragment.WhatToDoListFragmentSubcomponent {
      private WhatToDoListFragmentSubcomponentImpl(WhatToDoListFragment arg0) {

      }

      @Override
      public void inject(WhatToDoListFragment arg0) {
        injectWhatToDoListFragment(arg0);}

      private WhatToDoListFragment injectWhatToDoListFragment(WhatToDoListFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class WhatToDoCategoryListFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeWhatToDoCategoryListFragment.WhatToDoCategoryListFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeWhatToDoCategoryListFragment.WhatToDoCategoryListFragmentSubcomponent create(
          WhatToDoCategoryListFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new WhatToDoCategoryListFragmentSubcomponentImpl(arg0);
      }
    }

    private final class WhatToDoCategoryListFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeWhatToDoCategoryListFragment.WhatToDoCategoryListFragmentSubcomponent {
      private WhatToDoCategoryListFragmentSubcomponentImpl(WhatToDoCategoryListFragment arg0) {

      }

      @Override
      public void inject(WhatToDoCategoryListFragment arg0) {
        injectWhatToDoCategoryListFragment(arg0);}

      private WhatToDoCategoryListFragment injectWhatToDoCategoryListFragment(
          WhatToDoCategoryListFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class POIFragmentSubcomponentFactory implements FragmentBuildersModule_ContributePOIFragment.POIFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributePOIFragment.POIFragmentSubcomponent create(
          POIFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new POIFragmentSubcomponentImpl(arg0);
      }
    }

    private final class POIFragmentSubcomponentImpl implements FragmentBuildersModule_ContributePOIFragment.POIFragmentSubcomponent {
      private POIFragmentSubcomponentImpl(POIFragment arg0) {

      }

      @Override
      public void inject(POIFragment arg0) {
        injectPOIFragment(arg0);}

      private POIFragment injectPOIFragment(POIFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class TripDetailsFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeTripDetailsFragment.TripDetailsFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeTripDetailsFragment.TripDetailsFragmentSubcomponent create(
          TripDetailsFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new TripDetailsFragmentSubcomponentImpl(arg0);
      }
    }

    private final class TripDetailsFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeTripDetailsFragment.TripDetailsFragmentSubcomponent {
      private TripDetailsFragmentSubcomponentImpl(TripDetailsFragment arg0) {

      }

      @Override
      public void inject(TripDetailsFragment arg0) {
        injectTripDetailsFragment(arg0);}

      private TripDetailsFragment injectTripDetailsFragment(TripDetailsFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class SeasonDetailsFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeSeasonDetailsFragment.SeasonDetailsFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeSeasonDetailsFragment.SeasonDetailsFragmentSubcomponent create(
          SeasonDetailsFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new SeasonDetailsFragmentSubcomponentImpl(arg0);
      }
    }

    private final class SeasonDetailsFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeSeasonDetailsFragment.SeasonDetailsFragmentSubcomponent {
      private SeasonDetailsFragmentSubcomponentImpl(SeasonDetailsFragment arg0) {

      }

      @Override
      public void inject(SeasonDetailsFragment arg0) {
        injectSeasonDetailsFragment(arg0);}

      private SeasonDetailsFragment injectSeasonDetailsFragment(SeasonDetailsFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class UpdateProfileFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeUpdateProfileFragment.UpdateProfileFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeUpdateProfileFragment.UpdateProfileFragmentSubcomponent create(
          UpdateProfileFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new UpdateProfileFragmentSubcomponentImpl(arg0);
      }
    }

    private final class UpdateProfileFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeUpdateProfileFragment.UpdateProfileFragmentSubcomponent {
      private UpdateProfileFragmentSubcomponentImpl(UpdateProfileFragment arg0) {

      }

      @Override
      public void inject(UpdateProfileFragment arg0) {
        injectUpdateProfileFragment(arg0);}

      private UpdateProfileFragment injectUpdateProfileFragment(UpdateProfileFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class ForgotPasswordFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeForgotPasswordFragment.ForgotPasswordFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeForgotPasswordFragment.ForgotPasswordFragmentSubcomponent create(
          ForgotPasswordFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new ForgotPasswordFragmentSubcomponentImpl(arg0);
      }
    }

    private final class ForgotPasswordFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeForgotPasswordFragment.ForgotPasswordFragmentSubcomponent {
      private ForgotPasswordFragmentSubcomponentImpl(ForgotPasswordFragment arg0) {

      }

      @Override
      public void inject(ForgotPasswordFragment arg0) {
        injectForgotPasswordFragment(arg0);}

      private ForgotPasswordFragment injectForgotPasswordFragment(ForgotPasswordFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class PlanningFragmentSubcomponentFactory implements FragmentBuildersModule_ContributePlanningFragment.PlanningFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributePlanningFragment.PlanningFragmentSubcomponent create(
          PlanningFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new PlanningFragmentSubcomponentImpl(arg0);
      }
    }

    private final class PlanningFragmentSubcomponentImpl implements FragmentBuildersModule_ContributePlanningFragment.PlanningFragmentSubcomponent {
      private PlanningFragmentSubcomponentImpl(PlanningFragment arg0) {

      }

      @Override
      public void inject(PlanningFragment arg0) {
        injectPlanningFragment(arg0);}

      private PlanningFragment injectPlanningFragment(PlanningFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class UpdatePasswordFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeUpdateFragment.UpdatePasswordFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeUpdateFragment.UpdatePasswordFragmentSubcomponent create(
          UpdatePasswordFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new UpdatePasswordFragmentSubcomponentImpl(arg0);
      }
    }

    private final class UpdatePasswordFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeUpdateFragment.UpdatePasswordFragmentSubcomponent {
      private UpdatePasswordFragmentSubcomponentImpl(UpdatePasswordFragment arg0) {

      }

      @Override
      public void inject(UpdatePasswordFragment arg0) {
        injectUpdatePasswordFragment(arg0);}

      private UpdatePasswordFragment injectUpdatePasswordFragment(UpdatePasswordFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class MapFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeMapFragment.MapFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeMapFragment.MapFragmentSubcomponent create(
          MapFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new MapFragmentSubcomponentImpl(arg0);
      }
    }

    private final class MapFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeMapFragment.MapFragmentSubcomponent {
      private MapFragmentSubcomponentImpl(MapFragment arg0) {

      }

      @Override
      public void inject(MapFragment arg0) {
        injectMapFragment(arg0);}

      private MapFragment injectMapFragment(MapFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class HotelListFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeHotelListFragment.HotelListFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeHotelListFragment.HotelListFragmentSubcomponent create(
          HotelListFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new HotelListFragmentSubcomponentImpl(arg0);
      }
    }

    private final class HotelListFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeHotelListFragment.HotelListFragmentSubcomponent {
      private HotelListFragmentSubcomponentImpl(HotelListFragment arg0) {

      }

      @Override
      public void inject(HotelListFragment arg0) {
        injectHotelListFragment(arg0);}

      private HotelListFragment injectHotelListFragment(HotelListFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class HotelDetailsFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeHotelDetailsFragment.HotelDetailsFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeHotelDetailsFragment.HotelDetailsFragmentSubcomponent create(
          HotelDetailsFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new HotelDetailsFragmentSubcomponentImpl(arg0);
      }
    }

    private final class HotelDetailsFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeHotelDetailsFragment.HotelDetailsFragmentSubcomponent {
      private HotelDetailsFragmentSubcomponentImpl(HotelDetailsFragment arg0) {

      }

      @Override
      public void inject(HotelDetailsFragment arg0) {
        injectHotelDetailsFragment(arg0);}

      private HotelDetailsFragment injectHotelDetailsFragment(HotelDetailsFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class HotelBookingDetailsFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeHotelBookingDetailsFragment.HotelBookingDetailsFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeHotelBookingDetailsFragment.HotelBookingDetailsFragmentSubcomponent create(
          HotelBookingDetailsFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new HotelBookingDetailsFragmentSubcomponentImpl(arg0);
      }
    }

    private final class HotelBookingDetailsFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeHotelBookingDetailsFragment.HotelBookingDetailsFragmentSubcomponent {
      private HotelBookingDetailsFragmentSubcomponentImpl(HotelBookingDetailsFragment arg0) {

      }

      @Override
      public void inject(HotelBookingDetailsFragment arg0) {
        injectHotelBookingDetailsFragment(arg0);}

      private HotelBookingDetailsFragment injectHotelBookingDetailsFragment(
          HotelBookingDetailsFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class EventListFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeEventListFragment.EventListFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeEventListFragment.EventListFragmentSubcomponent create(
          EventListFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new EventListFragmentSubcomponentImpl(arg0);
      }
    }

    private final class EventListFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeEventListFragment.EventListFragmentSubcomponent {
      private EventListFragmentSubcomponentImpl(EventListFragment arg0) {

      }

      @Override
      public void inject(EventListFragment arg0) {
        injectEventListFragment(arg0);}

      private EventListFragment injectEventListFragment(EventListFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class EventDetailsFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeEventDetailsFragment.EventDetailsFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeEventDetailsFragment.EventDetailsFragmentSubcomponent create(
          EventDetailsFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new EventDetailsFragmentSubcomponentImpl(arg0);
      }
    }

    private final class EventDetailsFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeEventDetailsFragment.EventDetailsFragmentSubcomponent {
      private EventDetailsFragmentSubcomponentImpl(EventDetailsFragment arg0) {

      }

      @Override
      public void inject(EventDetailsFragment arg0) {
        injectEventDetailsFragment(arg0);}

      private EventDetailsFragment injectEventDetailsFragment(EventDetailsFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class FlightListFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeFlightListFragment.FlightListFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeFlightListFragment.FlightListFragmentSubcomponent create(
          FlightListFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new FlightListFragmentSubcomponentImpl(arg0);
      }
    }

    private final class FlightListFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeFlightListFragment.FlightListFragmentSubcomponent {
      private FlightListFragmentSubcomponentImpl(FlightListFragment arg0) {

      }

      @Override
      public void inject(FlightListFragment arg0) {
        injectFlightListFragment(arg0);}

      private FlightListFragment injectFlightListFragment(FlightListFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class BusBookingSearchFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeBusBookingSearchFragment.BusBookingSearchFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeBusBookingSearchFragment.BusBookingSearchFragmentSubcomponent create(
          BusBookingSearchFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new BusBookingSearchFragmentSubcomponentImpl(arg0);
      }
    }

    private final class BusBookingSearchFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeBusBookingSearchFragment.BusBookingSearchFragmentSubcomponent {
      private BusBookingSearchFragmentSubcomponentImpl(BusBookingSearchFragment arg0) {

      }

      @Override
      public void inject(BusBookingSearchFragment arg0) {
        injectBusBookingSearchFragment(arg0);}

      private BusBookingSearchFragment injectBusBookingSearchFragment(
          BusBookingSearchFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class BusListFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeBusListFragment.BusListFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeBusListFragment.BusListFragmentSubcomponent create(
          BusListFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new BusListFragmentSubcomponentImpl(arg0);
      }
    }

    private final class BusListFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeBusListFragment.BusListFragmentSubcomponent {
      private BusListFragmentSubcomponentImpl(BusListFragment arg0) {

      }

      @Override
      public void inject(BusListFragment arg0) {
        injectBusListFragment(arg0);}

      private BusListFragment injectBusListFragment(BusListFragment instance) {
        BaseFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.providePreferencesProvider.get());
        BaseFragment_MembersInjector.injectDialogUtils(instance, new DialogUtils());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }
  }
}
