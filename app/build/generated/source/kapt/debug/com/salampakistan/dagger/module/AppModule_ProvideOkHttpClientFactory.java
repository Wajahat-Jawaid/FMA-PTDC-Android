// Generated by Dagger (https://dagger.dev).
package com.salampakistan.dagger.module;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideOkHttpClientFactory implements Factory<OkHttpClient> {
  private final AppModule module;

  private final Provider<OkHttpClient> upstreamClientProvider;

  public AppModule_ProvideOkHttpClientFactory(AppModule module,
      Provider<OkHttpClient> upstreamClientProvider) {
    this.module = module;
    this.upstreamClientProvider = upstreamClientProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideOkHttpClient(module, upstreamClientProvider.get());
  }

  public static AppModule_ProvideOkHttpClientFactory create(AppModule module,
      Provider<OkHttpClient> upstreamClientProvider) {
    return new AppModule_ProvideOkHttpClientFactory(module, upstreamClientProvider);
  }

  public static OkHttpClient provideOkHttpClient(AppModule instance, OkHttpClient upstreamClient) {
    return Preconditions.checkNotNull(instance.provideOkHttpClient(upstreamClient), "Cannot return null from a non-@Nullable @Provides method");
  }
}
