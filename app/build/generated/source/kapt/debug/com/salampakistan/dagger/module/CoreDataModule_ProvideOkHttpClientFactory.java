// Generated by Dagger (https://dagger.dev).
package com.salampakistan.dagger.module;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CoreDataModule_ProvideOkHttpClientFactory implements Factory<OkHttpClient> {
  private final CoreDataModule module;

  private final Provider<HttpLoggingInterceptor> interceptorProvider;

  public CoreDataModule_ProvideOkHttpClientFactory(CoreDataModule module,
      Provider<HttpLoggingInterceptor> interceptorProvider) {
    this.module = module;
    this.interceptorProvider = interceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideOkHttpClient(module, interceptorProvider.get());
  }

  public static CoreDataModule_ProvideOkHttpClientFactory create(CoreDataModule module,
      Provider<HttpLoggingInterceptor> interceptorProvider) {
    return new CoreDataModule_ProvideOkHttpClientFactory(module, interceptorProvider);
  }

  public static OkHttpClient provideOkHttpClient(CoreDataModule instance,
      HttpLoggingInterceptor interceptor) {
    return Preconditions.checkNotNull(instance.provideOkHttpClient(interceptor), "Cannot return null from a non-@Nullable @Provides method");
  }
}
